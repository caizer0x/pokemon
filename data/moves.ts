// Code generated by translation from Zig - manual edits will be overwritten.

import { Type } from "./types";

// Since we don't have access to the rng module, we'll define the necessary functions here
const percent = (n: number) => n;

/**
 * Representation of a Generation I Pokémon move.
 */
export enum Move {
  None = 0,
  Pound = 1,
  KarateChop = 2,
  DoubleSlap = 3,
  CometPunch = 4,
  MegaPunch = 5,
  PayDay = 6,
  FirePunch = 7,
  IcePunch = 8,
  ThunderPunch = 9,
  Scratch = 10,
  ViseGrip = 11,
  Guillotine = 12,
  RazorWind = 13,
  SwordsDance = 14,
  Cut = 15,
  Gust = 16,
  WingAttack = 17,
  Whirlwind = 18,
  Fly = 19,
  Bind = 20,
  Slam = 21,
  VineWhip = 22,
  Stomp = 23,
  DoubleKick = 24,
  MegaKick = 25,
  JumpKick = 26,
  RollingKick = 27,
  SandAttack = 28,
  Headbutt = 29,
  HornAttack = 30,
  FuryAttack = 31,
  HornDrill = 32,
  Tackle = 33,
  BodySlam = 34,
  Wrap = 35,
  TakeDown = 36,
  Thrash = 37,
  DoubleEdge = 38,
  TailWhip = 39,
  PoisonSting = 40,
  Twineedle = 41,
  PinMissile = 42,
  Leer = 43,
  Bite = 44,
  Growl = 45,
  Roar = 46,
  Sing = 47,
  Supersonic = 48,
  SonicBoom = 49,
  Disable = 50,
  Acid = 51,
  Ember = 52,
  Flamethrower = 53,
  Mist = 54,
  WaterGun = 55,
  HydroPump = 56,
  Surf = 57,
  IceBeam = 58,
  Blizzard = 59,
  Psybeam = 60,
  BubbleBeam = 61,
  AuroraBeam = 62,
  HyperBeam = 63,
  Peck = 64,
  DrillPeck = 65,
  Submission = 66,
  LowKick = 67,
  Counter = 68,
  SeismicToss = 69,
  Strength = 70,
  Absorb = 71,
  MegaDrain = 72,
  LeechSeed = 73,
  Growth = 74,
  RazorLeaf = 75,
  SolarBeam = 76,
  PoisonPowder = 77,
  StunSpore = 78,
  SleepPowder = 79,
  PetalDance = 80,
  StringShot = 81,
  DragonRage = 82,
  FireSpin = 83,
  ThunderShock = 84,
  Thunderbolt = 85,
  ThunderWave = 86,
  Thunder = 87,
  RockThrow = 88,
  Earthquake = 89,
  Fissure = 90,
  Dig = 91,
  Toxic = 92,
  Confusion = 93,
  Psychic = 94,
  Hypnosis = 95,
  Meditate = 96,
  Agility = 97,
  QuickAttack = 98,
  Rage = 99,
  Teleport = 100,
  NightShade = 101,
  Mimic = 102,
  Screech = 103,
  DoubleTeam = 104,
  Recover = 105,
  Harden = 106,
  Minimize = 107,
  Smokescreen = 108,
  ConfuseRay = 109,
  Withdraw = 110,
  DefenseCurl = 111,
  Barrier = 112,
  LightScreen = 113,
  Haze = 114,
  Reflect = 115,
  FocusEnergy = 116,
  Bide = 117,
  Metronome = 118,
  MirrorMove = 119,
  SelfDestruct = 120,
  EggBomb = 121,
  Lick = 122,
  Smog = 123,
  Sludge = 124,
  BoneClub = 125,
  FireBlast = 126,
  Waterfall = 127,
  Clamp = 128,
  Swift = 129,
  SkullBash = 130,
  SpikeCannon = 131,
  Constrict = 132,
  Amnesia = 133,
  Kinesis = 134,
  SoftBoiled = 135,
  HighJumpKick = 136,
  Glare = 137,
  DreamEater = 138,
  PoisonGas = 139,
  Barrage = 140,
  LeechLife = 141,
  LovelyKiss = 142,
  SkyAttack = 143,
  Transform = 144,
  Bubble = 145,
  DizzyPunch = 146,
  Spore = 147,
  Flash = 148,
  Psywave = 149,
  Splash = 150,
  AcidArmor = 151,
  Crabhammer = 152,
  Explosion = 153,
  FurySwipes = 154,
  Bonemerang = 155,
  Rest = 156,
  RockSlide = 157,
  HyperFang = 158,
  Sharpen = 159,
  Conversion = 160,
  TriAttack = 161,
  SuperFang = 162,
  Slash = 163,
  Substitute = 164,
  Struggle = 165,

  // Sentinel used when Pokémon's turn should be skipped (e.g. bound)
  SKIP_TURN = 0xff,
}

/**
 * Representation of a move's effect.
 */
export enum Effect {
  None = 0,
  // onBegin
  Confusion = 1,
  Conversion = 2,
  FocusEnergy = 3,
  Haze = 4,
  Heal = 5,
  LeechSeed = 6,
  LightScreen = 7,
  Mimic = 8,
  Mist = 9,
  Paralyze = 10,
  Poison = 11,
  Reflect = 12,
  Splash = 13,
  Substitute = 14,
  SwitchAndTeleport = 15,
  Transform = 16,
  // onEnd
  AccuracyDown1 = 17,
  AttackDown1 = 18,
  DefenseDown1 = 19,
  DefenseDown2 = 20,
  SpeedDown1 = 21,
  AttackUp1 = 22,
  AttackUp2 = 23,
  Bide = 24,
  DefenseUp1 = 25,
  DefenseUp2 = 26,
  EvasionUp1 = 27,
  Sleep = 28,
  SpecialUp1 = 29,
  SpecialUp2 = 30,
  SpeedUp2 = 31,
  // isSpecial
  DrainHP = 32,
  DreamEater = 33,
  Explode = 34,
  JumpKick = 35,
  PayDay = 36,
  Rage = 37,
  Recoil = 38,
  Binding = 39,
  Charge = 40,
  SpecialDamage = 41,
  SuperFang = 42,
  Swift = 43,
  Thrashing = 44,
  // isMulti
  DoubleHit = 45,
  MultiHit = 46,
  Twineedle = 47,
  // other
  AttackDownChance = 48,
  DefenseDownChance = 49,
  SpeedDownChance = 50,
  SpecialDownChance = 51,
  BurnChance1 = 52,
  BurnChance2 = 53,
  ConfusionChance = 54,
  FlinchChance1 = 55,
  FlinchChance2 = 56,
  FreezeChance = 57,
  ParalyzeChance1 = 58,
  ParalyzeChance2 = 59,
  PoisonChance1 = 60,
  PoisonChance2 = 61,
  Disable = 62,
  HighCritical = 63,
  HyperBeam = 64,
  Metronome = 65,
  MirrorMove = 66,
  OHKO = 67,
}

/**
 * Target of a move.
 */
enum Target {
  // none
  All = 0,
  AllySide = 1,
  Field = 2,
  Self = 3,
  // resolve
  AllOthers = 4,
  Depends = 5,
  Other = 6,
  Any = 7,
  Allies = 8,
  Ally = 9,
  AllyOrSelf = 10,
  Foe = 11,
  // resolve + run
  Foes = 12,
  FoeSide = 13,
  RandomFoe = 14,
}

/**
 * Data associated with a Pokémon move.
 */
interface MoveData {
  effect: Effect;
  bp: number;
  accuracy: number;
  type: Type;
  target: Target;
}

const DATA: MoveData[] = [
  // Pound
  {
    effect: Effect.None,
    bp: 40,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // KarateChop
  {
    effect: Effect.HighCritical,
    bp: 50,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // DoubleSlap
  {
    effect: Effect.MultiHit,
    bp: 15,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // CometPunch
  {
    effect: Effect.MultiHit,
    bp: 18,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // MegaPunch
  {
    effect: Effect.None,
    bp: 80,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // PayDay
  {
    effect: Effect.PayDay,
    bp: 40,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // FirePunch
  {
    effect: Effect.BurnChance1,
    bp: 75,
    type: Type.Fire,
    accuracy: percent(100),
    target: Target.Other,
  },
  // IcePunch
  {
    effect: Effect.FreezeChance,
    bp: 75,
    type: Type.Ice,
    accuracy: percent(100),
    target: Target.Other,
  },
  // ThunderPunch
  {
    effect: Effect.ParalyzeChance1,
    bp: 75,
    type: Type.Electric,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Scratch
  {
    effect: Effect.None,
    bp: 40,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // ViseGrip
  {
    effect: Effect.None,
    bp: 55,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Guillotine
  {
    effect: Effect.OHKO,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(30),
    target: Target.Other,
  },
  // RazorWind
  {
    effect: Effect.Charge,
    bp: 80,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // SwordsDance
  {
    effect: Effect.AttackUp2,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Cut
  {
    effect: Effect.None,
    bp: 50,
    type: Type.Normal,
    accuracy: percent(95),
    target: Target.Other,
  },
  // Gust
  {
    effect: Effect.None,
    bp: 40,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Any,
  },
  // WingAttack
  {
    effect: Effect.None,
    bp: 35,
    type: Type.Flying,
    accuracy: percent(100),
    target: Target.Any,
  },
  // Whirlwind
  {
    effect: Effect.SwitchAndTeleport,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // Fly
  {
    effect: Effect.Charge,
    bp: 70,
    type: Type.Flying,
    accuracy: percent(95),
    target: Target.Any,
  },
  // Bind
  {
    effect: Effect.Binding,
    bp: 15,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // Slam
  {
    effect: Effect.None,
    bp: 80,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // VineWhip
  {
    effect: Effect.None,
    bp: 35,
    type: Type.Grass,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Stomp
  {
    effect: Effect.FlinchChance2,
    bp: 65,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // DoubleKick
  {
    effect: Effect.DoubleHit,
    bp: 30,
    type: Type.Fighting,
    accuracy: percent(100),
    target: Target.Other,
  },
  // MegaKick
  {
    effect: Effect.None,
    bp: 120,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // JumpKick
  {
    effect: Effect.JumpKick,
    bp: 70,
    type: Type.Fighting,
    accuracy: percent(95),
    target: Target.Other,
  },
  // RollingKick
  {
    effect: Effect.FlinchChance2,
    bp: 60,
    type: Type.Fighting,
    accuracy: percent(85),
    target: Target.Other,
  },
  // SandAttack
  {
    effect: Effect.AccuracyDown1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Headbutt
  {
    effect: Effect.FlinchChance2,
    bp: 70,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // HornAttack
  {
    effect: Effect.None,
    bp: 65,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // FuryAttack
  {
    effect: Effect.MultiHit,
    bp: 15,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // HornDrill
  {
    effect: Effect.OHKO,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(30),
    target: Target.Other,
  },
  // Tackle
  {
    effect: Effect.None,
    bp: 35,
    type: Type.Normal,
    accuracy: percent(95),
    target: Target.Other,
  },
  // BodySlam
  {
    effect: Effect.ParalyzeChance2,
    bp: 85,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Wrap
  {
    effect: Effect.Binding,
    bp: 15,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // TakeDown
  {
    effect: Effect.Recoil,
    bp: 90,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // Thrash
  {
    effect: Effect.Thrashing,
    bp: 90,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.RandomFoe,
  },
  // DoubleEdge
  {
    effect: Effect.Recoil,
    bp: 100,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // TailWhip
  {
    effect: Effect.DefenseDown1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Foes,
  },
  // PoisonSting
  {
    effect: Effect.PoisonChance1,
    bp: 15,
    type: Type.Poison,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Twineedle
  {
    effect: Effect.Twineedle,
    bp: 25,
    type: Type.Bug,
    accuracy: percent(100),
    target: Target.Other,
  },
  // PinMissile
  {
    effect: Effect.MultiHit,
    bp: 14,
    type: Type.Bug,
    accuracy: percent(85),
    target: Target.Other,
  },
  // Leer
  {
    effect: Effect.DefenseDown1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Foes,
  },
  // Bite
  {
    effect: Effect.FlinchChance1,
    bp: 60,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Growl
  {
    effect: Effect.AttackDown1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Foes,
  },
  // Roar
  {
    effect: Effect.SwitchAndTeleport,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Sing
  {
    effect: Effect.Sleep,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(55),
    target: Target.Other,
  },
  // Supersonic
  {
    effect: Effect.Confusion,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(55),
    target: Target.Other,
  },
  // SonicBoom
  {
    effect: Effect.SpecialDamage,
    bp: 1,
    type: Type.Normal,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Disable
  {
    effect: Effect.Disable,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(55),
    target: Target.Other,
  },
  // Acid
  {
    effect: Effect.DefenseDownChance,
    bp: 40,
    type: Type.Poison,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Ember
  {
    effect: Effect.BurnChance1,
    bp: 40,
    type: Type.Fire,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Flamethrower
  {
    effect: Effect.BurnChance1,
    bp: 95,
    type: Type.Fire,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Mist
  {
    effect: Effect.Mist,
    bp: 0,
    type: Type.Ice,
    accuracy: percent(100),
    target: Target.Self,
  },
  // WaterGun
  {
    effect: Effect.None,
    bp: 40,
    type: Type.Water,
    accuracy: percent(100),
    target: Target.Other,
  },
  // HydroPump
  {
    effect: Effect.None,
    bp: 120,
    type: Type.Water,
    accuracy: percent(80),
    target: Target.Other,
  },
  // Surf
  {
    effect: Effect.None,
    bp: 95,
    type: Type.Water,
    accuracy: percent(100),
    target: Target.Foes,
  },
  // IceBeam
  {
    effect: Effect.FreezeChance,
    bp: 95,
    type: Type.Ice,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Blizzard
  {
    effect: Effect.FreezeChance,
    bp: 120,
    type: Type.Ice,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Psybeam
  {
    effect: Effect.ConfusionChance,
    bp: 65,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Other,
  },
  // BubbleBeam
  {
    effect: Effect.SpeedDownChance,
    bp: 65,
    type: Type.Water,
    accuracy: percent(100),
    target: Target.Other,
  },
  // AuroraBeam
  {
    effect: Effect.AttackDownChance,
    bp: 65,
    type: Type.Ice,
    accuracy: percent(100),
    target: Target.Other,
  },
  // HyperBeam
  {
    effect: Effect.HyperBeam,
    bp: 150,
    type: Type.Normal,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Peck
  {
    effect: Effect.None,
    bp: 35,
    type: Type.Flying,
    accuracy: percent(100),
    target: Target.Any,
  },
  // DrillPeck
  {
    effect: Effect.None,
    bp: 80,
    type: Type.Flying,
    accuracy: percent(100),
    target: Target.Any,
  },
  // Submission
  {
    effect: Effect.Recoil,
    bp: 80,
    type: Type.Fighting,
    accuracy: percent(80),
    target: Target.Other,
  },
  // LowKick
  {
    effect: Effect.FlinchChance2,
    bp: 50,
    type: Type.Fighting,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Counter
  {
    effect: Effect.None,
    bp: 1,
    type: Type.Fighting,
    accuracy: percent(100),
    target: Target.Depends,
  },
  // SeismicToss
  {
    effect: Effect.SpecialDamage,
    bp: 1,
    type: Type.Fighting,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Strength
  {
    effect: Effect.None,
    bp: 80,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Absorb
  {
    effect: Effect.DrainHP,
    bp: 20,
    type: Type.Grass,
    accuracy: percent(100),
    target: Target.Other,
  },
  // MegaDrain
  {
    effect: Effect.DrainHP,
    bp: 40,
    type: Type.Grass,
    accuracy: percent(100),
    target: Target.Other,
  },
  // LeechSeed
  {
    effect: Effect.LeechSeed,
    bp: 0,
    type: Type.Grass,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Growth
  {
    effect: Effect.SpecialUp1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // RazorLeaf
  {
    effect: Effect.HighCritical,
    bp: 55,
    type: Type.Grass,
    accuracy: percent(95),
    target: Target.Other,
  },
  // SolarBeam
  {
    effect: Effect.Charge,
    bp: 120,
    type: Type.Grass,
    accuracy: percent(100),
    target: Target.Other,
  },
  // PoisonPowder
  {
    effect: Effect.Poison,
    bp: 0,
    type: Type.Poison,
    accuracy: percent(75),
    target: Target.Other,
  },
  // StunSpore
  {
    effect: Effect.Paralyze,
    bp: 0,
    type: Type.Grass,
    accuracy: percent(75),
    target: Target.Other,
  },
  // SleepPowder
  {
    effect: Effect.Sleep,
    bp: 0,
    type: Type.Grass,
    accuracy: percent(75),
    target: Target.Other,
  },
  // PetalDance
  {
    effect: Effect.Thrashing,
    bp: 70,
    type: Type.Grass,
    accuracy: percent(100),
    target: Target.RandomFoe,
  },
  // StringShot
  {
    effect: Effect.SpeedDown1,
    bp: 0,
    type: Type.Bug,
    accuracy: percent(95),
    target: Target.Foes,
  },
  // DragonRage
  {
    effect: Effect.SpecialDamage,
    bp: 1,
    type: Type.Dragon,
    accuracy: percent(100),
    target: Target.Other,
  },
  // FireSpin
  {
    effect: Effect.Binding,
    bp: 15,
    type: Type.Fire,
    accuracy: percent(70),
    target: Target.Other,
  },
  // ThunderShock
  {
    effect: Effect.ParalyzeChance1,
    bp: 40,
    type: Type.Electric,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Thunderbolt
  {
    effect: Effect.ParalyzeChance1,
    bp: 95,
    type: Type.Electric,
    accuracy: percent(100),
    target: Target.Other,
  },
  // ThunderWave
  {
    effect: Effect.Paralyze,
    bp: 0,
    type: Type.Electric,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Thunder
  {
    effect: Effect.ParalyzeChance1,
    bp: 120,
    type: Type.Electric,
    accuracy: percent(70),
    target: Target.Other,
  },
  // RockThrow
  {
    effect: Effect.None,
    bp: 50,
    type: Type.Rock,
    accuracy: percent(65),
    target: Target.Other,
  },
  // Earthquake
  {
    effect: Effect.None,
    bp: 100,
    type: Type.Ground,
    accuracy: percent(100),
    target: Target.AllOthers,
  },
  // Fissure
  {
    effect: Effect.OHKO,
    bp: 0,
    type: Type.Ground,
    accuracy: percent(30),
    target: Target.Other,
  },
  // Dig
  {
    effect: Effect.Charge,
    bp: 100,
    type: Type.Ground,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Toxic
  {
    effect: Effect.Poison,
    bp: 0,
    type: Type.Poison,
    accuracy: percent(85),
    target: Target.Other,
  },
  // Confusion
  {
    effect: Effect.ConfusionChance,
    bp: 50,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Psychic
  {
    effect: Effect.SpecialDownChance,
    bp: 90,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Hypnosis
  {
    effect: Effect.Sleep,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(60),
    target: Target.Other,
  },
  // Meditate
  {
    effect: Effect.AttackUp1,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Agility
  {
    effect: Effect.SpeedUp2,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // QuickAttack
  {
    effect: Effect.None,
    bp: 40,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Rage
  {
    effect: Effect.Rage,
    bp: 20,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Teleport
  {
    effect: Effect.SwitchAndTeleport,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // NightShade
  {
    effect: Effect.SpecialDamage,
    bp: 1,
    type: Type.Ghost,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Mimic
  {
    effect: Effect.Mimic,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Screech
  {
    effect: Effect.DefenseDown2,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // DoubleTeam
  {
    effect: Effect.EvasionUp1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Recover
  {
    effect: Effect.Heal,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Harden
  {
    effect: Effect.DefenseUp1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Minimize
  {
    effect: Effect.EvasionUp1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Smokescreen
  {
    effect: Effect.AccuracyDown1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // ConfuseRay
  {
    effect: Effect.Confusion,
    bp: 0,
    type: Type.Ghost,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Withdraw
  {
    effect: Effect.DefenseUp1,
    bp: 0,
    type: Type.Water,
    accuracy: percent(100),
    target: Target.Self,
  },
  // DefenseCurl
  {
    effect: Effect.DefenseUp1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Barrier
  {
    effect: Effect.DefenseUp2,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // LightScreen
  {
    effect: Effect.LightScreen,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Haze
  {
    effect: Effect.Haze,
    bp: 0,
    type: Type.Ice,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Reflect
  {
    effect: Effect.Reflect,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // FocusEnergy
  {
    effect: Effect.FocusEnergy,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Bide
  {
    effect: Effect.Bide,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Metronome
  {
    effect: Effect.Metronome,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // MirrorMove
  {
    effect: Effect.MirrorMove,
    bp: 0,
    type: Type.Flying,
    accuracy: percent(100),
    target: Target.Self,
  },
  // SelfDestruct
  {
    effect: Effect.Explode,
    bp: 130,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // EggBomb
  {
    effect: Effect.None,
    bp: 100,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // Lick
  {
    effect: Effect.ParalyzeChance2,
    bp: 20,
    type: Type.Ghost,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Smog
  {
    effect: Effect.PoisonChance2,
    bp: 20,
    type: Type.Poison,
    accuracy: percent(70),
    target: Target.Other,
  },
  // Sludge
  {
    effect: Effect.PoisonChance2,
    bp: 65,
    type: Type.Poison,
    accuracy: percent(100),
    target: Target.Other,
  },
  // BoneClub
  {
    effect: Effect.FlinchChance1,
    bp: 65,
    type: Type.Ground,
    accuracy: percent(85),
    target: Target.Other,
  },
  // FireBlast
  {
    effect: Effect.BurnChance2,
    bp: 120,
    type: Type.Fire,
    accuracy: percent(85),
    target: Target.Other,
  },
  // Waterfall
  {
    effect: Effect.None,
    bp: 80,
    type: Type.Water,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Clamp
  {
    effect: Effect.Binding,
    bp: 35,
    type: Type.Water,
    accuracy: percent(75),
    target: Target.Other,
  },
  // Swift
  {
    effect: Effect.Swift,
    bp: 60,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Foes,
  },
  // SkullBash
  {
    effect: Effect.Charge,
    bp: 100,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // SpikeCannon
  {
    effect: Effect.MultiHit,
    bp: 20,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Constrict
  {
    effect: Effect.SpeedDownChance,
    bp: 10,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Amnesia
  {
    effect: Effect.SpecialUp2,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Kinesis
  {
    effect: Effect.AccuracyDown1,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(80),
    target: Target.Other,
  },
  // SoftBoiled
  {
    effect: Effect.Heal,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // HighJumpKick
  {
    effect: Effect.JumpKick,
    bp: 85,
    type: Type.Fighting,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Glare
  {
    effect: Effect.Paralyze,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // DreamEater
  {
    effect: Effect.DreamEater,
    bp: 100,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Other,
  },
  // PoisonGas
  {
    effect: Effect.Poison,
    bp: 0,
    type: Type.Poison,
    accuracy: percent(55),
    target: Target.Other,
  },
  // Barrage
  {
    effect: Effect.MultiHit,
    bp: 15,
    type: Type.Normal,
    accuracy: percent(85),
    target: Target.Other,
  },
  // LeechLife
  {
    effect: Effect.DrainHP,
    bp: 20,
    type: Type.Bug,
    accuracy: percent(100),
    target: Target.Other,
  },
  // LovelyKiss
  {
    effect: Effect.Sleep,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(75),
    target: Target.Other,
  },
  // SkyAttack
  {
    effect: Effect.Charge,
    bp: 140,
    type: Type.Flying,
    accuracy: percent(90),
    target: Target.Any,
  },
  // Transform
  {
    effect: Effect.Transform,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Bubble
  {
    effect: Effect.SpeedDownChance,
    bp: 20,
    type: Type.Water,
    accuracy: percent(100),
    target: Target.Other,
  },
  // DizzyPunch
  {
    effect: Effect.None,
    bp: 70,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Spore
  {
    effect: Effect.Sleep,
    bp: 0,
    type: Type.Grass,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Flash
  {
    effect: Effect.AccuracyDown1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(70),
    target: Target.Other,
  },
  // Psywave
  {
    effect: Effect.SpecialDamage,
    bp: 1,
    type: Type.Psychic,
    accuracy: percent(80),
    target: Target.Other,
  },
  // Splash
  {
    effect: Effect.Splash,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // AcidArmor
  {
    effect: Effect.DefenseUp2,
    bp: 0,
    type: Type.Poison,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Crabhammer
  {
    effect: Effect.HighCritical,
    bp: 90,
    type: Type.Water,
    accuracy: percent(85),
    target: Target.Other,
  },
  // Explosion
  {
    effect: Effect.Explode,
    bp: 170,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // FurySwipes
  {
    effect: Effect.MultiHit,
    bp: 18,
    type: Type.Normal,
    accuracy: percent(80),
    target: Target.Other,
  },
  // Bonemerang
  {
    effect: Effect.DoubleHit,
    bp: 50,
    type: Type.Ground,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Rest
  {
    effect: Effect.Heal,
    bp: 0,
    type: Type.Psychic,
    accuracy: percent(100),
    target: Target.Self,
  },
  // RockSlide
  {
    effect: Effect.None,
    bp: 75,
    type: Type.Rock,
    accuracy: percent(90),
    target: Target.Other,
  },
  // HyperFang
  {
    effect: Effect.FlinchChance1,
    bp: 80,
    type: Type.Normal,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Sharpen
  {
    effect: Effect.AttackUp1,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Conversion
  {
    effect: Effect.Conversion,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // TriAttack
  {
    effect: Effect.None,
    bp: 80,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // SuperFang
  {
    effect: Effect.SuperFang,
    bp: 1,
    type: Type.Normal,
    accuracy: percent(90),
    target: Target.Other,
  },
  // Slash
  {
    effect: Effect.HighCritical,
    bp: 70,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Other,
  },
  // Substitute
  {
    effect: Effect.Substitute,
    bp: 0,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.Self,
  },
  // Struggle
  {
    effect: Effect.Recoil,
    bp: 50,
    type: Type.Normal,
    accuracy: percent(100),
    target: Target.RandomFoe,
  },
];

const PP: number[] = [
  35, // Pound
  25, // KarateChop
  10, // DoubleSlap
  15, // CometPunch
  20, // MegaPunch
  20, // PayDay
  15, // FirePunch
  15, // IcePunch
  15, // ThunderPunch
  35, // Scratch
  30, // ViseGrip
  5, // Guillotine
  10, // RazorWind
  30, // SwordsDance
  30, // Cut
  35, // Gust
  35, // WingAttack
  20, // Whirlwind
  15, // Fly
  20, // Bind
  20, // Slam
  10, // VineWhip
  20, // Stomp
  30, // DoubleKick
  5, // MegaKick
  25, // JumpKick
  15, // RollingKick
  15, // SandAttack
  15, // Headbutt
  25, // HornAttack
  20, // FuryAttack
  5, // HornDrill
  35, // Tackle
  15, // BodySlam
  20, // Wrap
  20, // TakeDown
  20, // Thrash
  15, // DoubleEdge
  30, // TailWhip
  35, // PoisonSting
  20, // Twineedle
  20, // PinMissile
  30, // Leer
  25, // Bite
  40, // Growl
  20, // Roar
  15, // Sing
  20, // Supersonic
  20, // SonicBoom
  20, // Disable
  30, // Acid
  25, // Ember
  15, // Flamethrower
  30, // Mist
  25, // WaterGun
  5, // HydroPump
  15, // Surf
  10, // IceBeam
  5, // Blizzard
  20, // Psybeam
  20, // BubbleBeam
  20, // AuroraBeam
  5, // HyperBeam
  35, // Peck
  20, // DrillPeck
  25, // Submission
  20, // LowKick
  20, // Counter
  20, // SeismicToss
  15, // Strength
  20, // Absorb
  10, // MegaDrain
  10, // LeechSeed
  40, // Growth
  25, // RazorLeaf
  10, // SolarBeam
  35, // PoisonPowder
  30, // StunSpore
  15, // SleepPowder
  20, // PetalDance
  40, // StringShot
  10, // DragonRage
  15, // FireSpin
  30, // ThunderShock
  15, // Thunderbolt
  20, // ThunderWave
  10, // Thunder
  15, // RockThrow
  10, // Earthquake
  5, // Fissure
  10, // Dig
  10, // Toxic
  25, // Confusion
  10, // Psychic
  20, // Hypnosis
  40, // Meditate
  30, // Agility
  30, // QuickAttack
  20, // Rage
  20, // Teleport
  15, // NightShade
  10, // Mimic
  40, // Screech
  15, // DoubleTeam
  20, // Recover
  30, // Harden
  20, // Minimize
  20, // Smokescreen
  10, // ConfuseRay
  40, // Withdraw
  40, // DefenseCurl
  30, // Barrier
  30, // LightScreen
  30, // Haze
  20, // Reflect
  30, // FocusEnergy
  10, // Bide
  10, // Metronome
  20, // MirrorMove
  5, // SelfDestruct
  10, // EggBomb
  30, // Lick
  20, // Smog
  20, // Sludge
  20, // BoneClub
  5, // FireBlast
  15, // Waterfall
  10, // Clamp
  20, // Swift
  15, // SkullBash
  15, // SpikeCannon
  35, // Constrict
  20, // Amnesia
  15, // Kinesis
  10, // SoftBoiled
  20, // HighJumpKick
  30, // Glare
  15, // DreamEater
  40, // PoisonGas
  20, // Barrage
  15, // LeechLife
  10, // LovelyKiss
  5, // SkyAttack
  10, // Transform
  30, // Bubble
  10, // DizzyPunch
  15, // Spore
  20, // Flash
  15, // Psywave
  40, // Splash
  40, // AcidArmor
  10, // Crabhammer
  5, // Explosion
  15, // FurySwipes
  10, // Bonemerang
  10, // Rest
  10, // RockSlide
  15, // HyperFang
  30, // Sharpen
  30, // Conversion
  10, // TriAttack
  10, // SuperFang
  20, // Slash
  10, // Substitute
  10, // Struggle
];

// Constants and utility functions
export const size = 165; // The number of Pokémon moves in this generation

/**
 * Pokémon moves that can be called by Metronome in this generation.
 */
export const METRONOME: Move[] = (() => {
  const moves: Move[] = [];
  for (let i = 1; i < size; i++) {
    if (i !== Move.Metronome) {
      moves.push(i);
    }
  }
  return moves;
})();

/**
 * Returns the data corresponding to the move.
 */
export function get(id: Move): MoveData {
  if (id === Move.None || id === Move.SKIP_TURN) {
    throw new Error("Invalid move ID");
  }
  return DATA[id - 1];
}

/**
 * Returns the base PP of the move.
 */
export function pp(id: Move): number {
  if (id === Move.None) {
    throw new Error("Invalid move ID");
  }
  return PP[id - 1];
}

/**
 * Whether this effect activates during the "begin" step of move execution.
 */
export function onBegin(effect: Effect): boolean {
  return effect > 0 && effect <= 16;
}

/**
 * Whether this effect lowers stats.
 */
export function isStatDown(effect: Effect): boolean {
  return effect > 16 && effect <= 21;
}

/**
 * Whether this effect activates during the "end" step of move execution.
 */
export function onEnd(effect: Effect): boolean {
  return effect > 16 && effect <= 31;
}

/**
 * Whether this effect is considered to "always happen".
 */
export function alwaysHappens(effect: Effect): boolean {
  return effect > 31 && effect <= 38;
}

/**
 * Whether this effect is handled specially by the engine.
 */
export function isSpecial(effect: Effect): boolean {
  // NB: isSpecial includes isMulti up to Twineedle
  return effect > 31 && effect <= 46;
}

/**
 * Whether this effect is a multi-hit effect.
 */
export function isMulti(effect: Effect): boolean {
  return effect > 44 && effect <= 47;
}

/**
 * Whether this effect is has chance of lowering stats.
 */
export function isStatDownChance(effect: Effect): boolean {
  return effect > 47 && effect <= 51;
}

/**
 * Whether this effect has a secondary chance.
 */
export function isSecondaryChance(effect: Effect): boolean {
  // NB: isSecondaryChance includes isStatDownChance as well as Twineedle
  return effect > 46 && effect <= 61;
}
