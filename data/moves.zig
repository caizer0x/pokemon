//! Code generated by `tools/generate` - manual edits will be overwritten.

const gen1 = @import("../../gen1/data.zig");
const rng = @import("../../common/rng.zig");
const std = @import("std");

const assert = std.debug.assert;
const percent = rng.Gen12.percent;
const Type = gen1.Type;

/// Representation of a Generation I Pokémon move.
pub const Move = enum(u8) {
    None,
    Pound,
    KarateChop,
    DoubleSlap,
    CometPunch,
    MegaPunch,
    PayDay,
    FirePunch,
    IcePunch,
    ThunderPunch,
    Scratch,
    ViseGrip,
    Guillotine,
    RazorWind,
    SwordsDance,
    Cut,
    Gust,
    WingAttack,
    Whirlwind,
    Fly,
    Bind,
    Slam,
    VineWhip,
    Stomp,
    DoubleKick,
    MegaKick,
    JumpKick,
    RollingKick,
    SandAttack,
    Headbutt,
    HornAttack,
    FuryAttack,
    HornDrill,
    Tackle,
    BodySlam,
    Wrap,
    TakeDown,
    Thrash,
    DoubleEdge,
    TailWhip,
    PoisonSting,
    Twineedle,
    PinMissile,
    Leer,
    Bite,
    Growl,
    Roar,
    Sing,
    Supersonic,
    SonicBoom,
    Disable,
    Acid,
    Ember,
    Flamethrower,
    Mist,
    WaterGun,
    HydroPump,
    Surf,
    IceBeam,
    Blizzard,
    Psybeam,
    BubbleBeam,
    AuroraBeam,
    HyperBeam,
    Peck,
    DrillPeck,
    Submission,
    LowKick,
    Counter,
    SeismicToss,
    Strength,
    Absorb,
    MegaDrain,
    LeechSeed,
    Growth,
    RazorLeaf,
    SolarBeam,
    PoisonPowder,
    StunSpore,
    SleepPowder,
    PetalDance,
    StringShot,
    DragonRage,
    FireSpin,
    ThunderShock,
    Thunderbolt,
    ThunderWave,
    Thunder,
    RockThrow,
    Earthquake,
    Fissure,
    Dig,
    Toxic,
    Confusion,
    Psychic,
    Hypnosis,
    Meditate,
    Agility,
    QuickAttack,
    Rage,
    Teleport,
    NightShade,
    Mimic,
    Screech,
    DoubleTeam,
    Recover,
    Harden,
    Minimize,
    Smokescreen,
    ConfuseRay,
    Withdraw,
    DefenseCurl,
    Barrier,
    LightScreen,
    Haze,
    Reflect,
    FocusEnergy,
    Bide,
    Metronome,
    MirrorMove,
    SelfDestruct,
    EggBomb,
    Lick,
    Smog,
    Sludge,
    BoneClub,
    FireBlast,
    Waterfall,
    Clamp,
    Swift,
    SkullBash,
    SpikeCannon,
    Constrict,
    Amnesia,
    Kinesis,
    SoftBoiled,
    HighJumpKick,
    Glare,
    DreamEater,
    PoisonGas,
    Barrage,
    LeechLife,
    LovelyKiss,
    SkyAttack,
    Transform,
    Bubble,
    DizzyPunch,
    Spore,
    Flash,
    Psywave,
    Splash,
    AcidArmor,
    Crabhammer,
    Explosion,
    FurySwipes,
    Bonemerang,
    Rest,
    RockSlide,
    HyperFang,
    Sharpen,
    Conversion,
    TriAttack,
    SuperFang,
    Slash,
    Substitute,
    Struggle,

    // Sentinel used when Pokémon's turn should be skipped (e.g. bound)
    SKIP_TURN = 0xFF,

    /// Data associated with a Pokémon move.
    pub const Data = packed struct(u32) {
        effect: Effect,
        /// The move's base PP.
        bp: u8,
        /// The move's accuracy percentage.
        accuracy: u8,
        /// The move's type.
        type: Type,
        /// The move's targeting behavior.
        target: Target,
    };

    const DATA = [_]Data{
        // Pound
        .{
            .effect = .None,
            .bp = 40,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // KarateChop
        .{
            .effect = .HighCritical,
            .bp = 50,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // DoubleSlap
        .{
            .effect = .MultiHit,
            .bp = 15,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // CometPunch
        .{
            .effect = .MultiHit,
            .bp = 18,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // MegaPunch
        .{
            .effect = .None,
            .bp = 80,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // PayDay
        .{
            .effect = .PayDay,
            .bp = 40,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // FirePunch
        .{
            .effect = .BurnChance1,
            .bp = 75,
            .type = .Fire,
            .accuracy = percent(100),
            .target = .Other,
        },
        // IcePunch
        .{
            .effect = .FreezeChance,
            .bp = 75,
            .type = .Ice,
            .accuracy = percent(100),
            .target = .Other,
        },
        // ThunderPunch
        .{
            .effect = .ParalyzeChance1,
            .bp = 75,
            .type = .Electric,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Scratch
        .{
            .effect = .None,
            .bp = 40,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // ViseGrip
        .{
            .effect = .None,
            .bp = 55,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Guillotine
        .{
            .effect = .OHKO,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(30),
            .target = .Other,
        },
        // RazorWind
        .{
            .effect = .Charge,
            .bp = 80,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // SwordsDance
        .{
            .effect = .AttackUp2,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Cut
        .{
            .effect = .None,
            .bp = 50,
            .type = .Normal,
            .accuracy = percent(95),
            .target = .Other,
        },
        // Gust
        .{
            .effect = .None,
            .bp = 40,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Any,
        },
        // WingAttack
        .{
            .effect = .None,
            .bp = 35,
            .type = .Flying,
            .accuracy = percent(100),
            .target = .Any,
        },
        // Whirlwind
        .{
            .effect = .SwitchAndTeleport,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // Fly
        .{
            .effect = .Charge,
            .bp = 70,
            .type = .Flying,
            .accuracy = percent(95),
            .target = .Any,
        },
        // Bind
        .{
            .effect = .Binding,
            .bp = 15,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // Slam
        .{
            .effect = .None,
            .bp = 80,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // VineWhip
        .{
            .effect = .None,
            .bp = 35,
            .type = .Grass,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Stomp
        .{
            .effect = .FlinchChance2,
            .bp = 65,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // DoubleKick
        .{
            .effect = .DoubleHit,
            .bp = 30,
            .type = .Fighting,
            .accuracy = percent(100),
            .target = .Other,
        },
        // MegaKick
        .{
            .effect = .None,
            .bp = 120,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // JumpKick
        .{
            .effect = .JumpKick,
            .bp = 70,
            .type = .Fighting,
            .accuracy = percent(95),
            .target = .Other,
        },
        // RollingKick
        .{
            .effect = .FlinchChance2,
            .bp = 60,
            .type = .Fighting,
            .accuracy = percent(85),
            .target = .Other,
        },
        // SandAttack
        .{
            .effect = .AccuracyDown1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Headbutt
        .{
            .effect = .FlinchChance2,
            .bp = 70,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // HornAttack
        .{
            .effect = .None,
            .bp = 65,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // FuryAttack
        .{
            .effect = .MultiHit,
            .bp = 15,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // HornDrill
        .{
            .effect = .OHKO,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(30),
            .target = .Other,
        },
        // Tackle
        .{
            .effect = .None,
            .bp = 35,
            .type = .Normal,
            .accuracy = percent(95),
            .target = .Other,
        },
        // BodySlam
        .{
            .effect = .ParalyzeChance2,
            .bp = 85,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Wrap
        .{
            .effect = .Binding,
            .bp = 15,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // TakeDown
        .{
            .effect = .Recoil,
            .bp = 90,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // Thrash
        .{
            .effect = .Thrashing,
            .bp = 90,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .RandomFoe,
        },
        // DoubleEdge
        .{
            .effect = .Recoil,
            .bp = 100,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // TailWhip
        .{
            .effect = .DefenseDown1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Foes,
        },
        // PoisonSting
        .{
            .effect = .PoisonChance1,
            .bp = 15,
            .type = .Poison,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Twineedle
        .{
            .effect = .Twineedle,
            .bp = 25,
            .type = .Bug,
            .accuracy = percent(100),
            .target = .Other,
        },
        // PinMissile
        .{
            .effect = .MultiHit,
            .bp = 14,
            .type = .Bug,
            .accuracy = percent(85),
            .target = .Other,
        },
        // Leer
        .{
            .effect = .DefenseDown1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Foes,
        },
        // Bite
        .{
            .effect = .FlinchChance1,
            .bp = 60,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Growl
        .{
            .effect = .AttackDown1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Foes,
        },
        // Roar
        .{
            .effect = .SwitchAndTeleport,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Sing
        .{
            .effect = .Sleep,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(55),
            .target = .Other,
        },
        // Supersonic
        .{
            .effect = .Confusion,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(55),
            .target = .Other,
        },
        // SonicBoom
        .{
            .effect = .SpecialDamage,
            .bp = 1,
            .type = .Normal,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Disable
        .{
            .effect = .Disable,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(55),
            .target = .Other,
        },
        // Acid
        .{
            .effect = .DefenseDownChance,
            .bp = 40,
            .type = .Poison,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Ember
        .{
            .effect = .BurnChance1,
            .bp = 40,
            .type = .Fire,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Flamethrower
        .{
            .effect = .BurnChance1,
            .bp = 95,
            .type = .Fire,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Mist
        .{
            .effect = .Mist,
            .bp = 0,
            .type = .Ice,
            .accuracy = percent(100),
            .target = .Self,
        },
        // WaterGun
        .{
            .effect = .None,
            .bp = 40,
            .type = .Water,
            .accuracy = percent(100),
            .target = .Other,
        },
        // HydroPump
        .{
            .effect = .None,
            .bp = 120,
            .type = .Water,
            .accuracy = percent(80),
            .target = .Other,
        },
        // Surf
        .{
            .effect = .None,
            .bp = 95,
            .type = .Water,
            .accuracy = percent(100),
            .target = .Foes,
        },
        // IceBeam
        .{
            .effect = .FreezeChance,
            .bp = 95,
            .type = .Ice,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Blizzard
        .{
            .effect = .FreezeChance,
            .bp = 120,
            .type = .Ice,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Psybeam
        .{
            .effect = .ConfusionChance,
            .bp = 65,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Other,
        },
        // BubbleBeam
        .{
            .effect = .SpeedDownChance,
            .bp = 65,
            .type = .Water,
            .accuracy = percent(100),
            .target = .Other,
        },
        // AuroraBeam
        .{
            .effect = .AttackDownChance,
            .bp = 65,
            .type = .Ice,
            .accuracy = percent(100),
            .target = .Other,
        },
        // HyperBeam
        .{
            .effect = .HyperBeam,
            .bp = 150,
            .type = .Normal,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Peck
        .{
            .effect = .None,
            .bp = 35,
            .type = .Flying,
            .accuracy = percent(100),
            .target = .Any,
        },
        // DrillPeck
        .{
            .effect = .None,
            .bp = 80,
            .type = .Flying,
            .accuracy = percent(100),
            .target = .Any,
        },
        // Submission
        .{
            .effect = .Recoil,
            .bp = 80,
            .type = .Fighting,
            .accuracy = percent(80),
            .target = .Other,
        },
        // LowKick
        .{
            .effect = .FlinchChance2,
            .bp = 50,
            .type = .Fighting,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Counter
        .{
            .effect = .None,
            .bp = 1,
            .type = .Fighting,
            .accuracy = percent(100),
            .target = .Depends,
        },
        // SeismicToss
        .{
            .effect = .SpecialDamage,
            .bp = 1,
            .type = .Fighting,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Strength
        .{
            .effect = .None,
            .bp = 80,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Absorb
        .{
            .effect = .DrainHP,
            .bp = 20,
            .type = .Grass,
            .accuracy = percent(100),
            .target = .Other,
        },
        // MegaDrain
        .{
            .effect = .DrainHP,
            .bp = 40,
            .type = .Grass,
            .accuracy = percent(100),
            .target = .Other,
        },
        // LeechSeed
        .{
            .effect = .LeechSeed,
            .bp = 0,
            .type = .Grass,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Growth
        .{
            .effect = .SpecialUp1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // RazorLeaf
        .{
            .effect = .HighCritical,
            .bp = 55,
            .type = .Grass,
            .accuracy = percent(95),
            .target = .Other,
        },
        // SolarBeam
        .{
            .effect = .Charge,
            .bp = 120,
            .type = .Grass,
            .accuracy = percent(100),
            .target = .Other,
        },
        // PoisonPowder
        .{
            .effect = .Poison,
            .bp = 0,
            .type = .Poison,
            .accuracy = percent(75),
            .target = .Other,
        },
        // StunSpore
        .{
            .effect = .Paralyze,
            .bp = 0,
            .type = .Grass,
            .accuracy = percent(75),
            .target = .Other,
        },
        // SleepPowder
        .{
            .effect = .Sleep,
            .bp = 0,
            .type = .Grass,
            .accuracy = percent(75),
            .target = .Other,
        },
        // PetalDance
        .{
            .effect = .Thrashing,
            .bp = 70,
            .type = .Grass,
            .accuracy = percent(100),
            .target = .RandomFoe,
        },
        // StringShot
        .{
            .effect = .SpeedDown1,
            .bp = 0,
            .type = .Bug,
            .accuracy = percent(95),
            .target = .Foes,
        },
        // DragonRage
        .{
            .effect = .SpecialDamage,
            .bp = 1,
            .type = .Dragon,
            .accuracy = percent(100),
            .target = .Other,
        },
        // FireSpin
        .{
            .effect = .Binding,
            .bp = 15,
            .type = .Fire,
            .accuracy = percent(70),
            .target = .Other,
        },
        // ThunderShock
        .{
            .effect = .ParalyzeChance1,
            .bp = 40,
            .type = .Electric,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Thunderbolt
        .{
            .effect = .ParalyzeChance1,
            .bp = 95,
            .type = .Electric,
            .accuracy = percent(100),
            .target = .Other,
        },
        // ThunderWave
        .{
            .effect = .Paralyze,
            .bp = 0,
            .type = .Electric,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Thunder
        .{
            .effect = .ParalyzeChance1,
            .bp = 120,
            .type = .Electric,
            .accuracy = percent(70),
            .target = .Other,
        },
        // RockThrow
        .{
            .effect = .None,
            .bp = 50,
            .type = .Rock,
            .accuracy = percent(65),
            .target = .Other,
        },
        // Earthquake
        .{
            .effect = .None,
            .bp = 100,
            .type = .Ground,
            .accuracy = percent(100),
            .target = .AllOthers,
        },
        // Fissure
        .{
            .effect = .OHKO,
            .bp = 0,
            .type = .Ground,
            .accuracy = percent(30),
            .target = .Other,
        },
        // Dig
        .{
            .effect = .Charge,
            .bp = 100,
            .type = .Ground,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Toxic
        .{
            .effect = .Poison,
            .bp = 0,
            .type = .Poison,
            .accuracy = percent(85),
            .target = .Other,
        },
        // Confusion
        .{
            .effect = .ConfusionChance,
            .bp = 50,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Psychic
        .{
            .effect = .SpecialDownChance,
            .bp = 90,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Hypnosis
        .{
            .effect = .Sleep,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(60),
            .target = .Other,
        },
        // Meditate
        .{
            .effect = .AttackUp1,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Agility
        .{
            .effect = .SpeedUp2,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // QuickAttack
        .{
            .effect = .None,
            .bp = 40,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Rage
        .{
            .effect = .Rage,
            .bp = 20,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Teleport
        .{
            .effect = .SwitchAndTeleport,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // NightShade
        .{
            .effect = .SpecialDamage,
            .bp = 1,
            .type = .Ghost,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Mimic
        .{
            .effect = .Mimic,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Screech
        .{
            .effect = .DefenseDown2,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // DoubleTeam
        .{
            .effect = .EvasionUp1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Recover
        .{
            .effect = .Heal,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Harden
        .{
            .effect = .DefenseUp1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Minimize
        .{
            .effect = .EvasionUp1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Smokescreen
        .{
            .effect = .AccuracyDown1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // ConfuseRay
        .{
            .effect = .Confusion,
            .bp = 0,
            .type = .Ghost,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Withdraw
        .{
            .effect = .DefenseUp1,
            .bp = 0,
            .type = .Water,
            .accuracy = percent(100),
            .target = .Self,
        },
        // DefenseCurl
        .{
            .effect = .DefenseUp1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Barrier
        .{
            .effect = .DefenseUp2,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // LightScreen
        .{
            .effect = .LightScreen,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Haze
        .{
            .effect = .Haze,
            .bp = 0,
            .type = .Ice,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Reflect
        .{
            .effect = .Reflect,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // FocusEnergy
        .{
            .effect = .FocusEnergy,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Bide
        .{
            .effect = .Bide,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Metronome
        .{
            .effect = .Metronome,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // MirrorMove
        .{
            .effect = .MirrorMove,
            .bp = 0,
            .type = .Flying,
            .accuracy = percent(100),
            .target = .Self,
        },
        // SelfDestruct
        .{
            .effect = .Explode,
            .bp = 130,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // EggBomb
        .{
            .effect = .None,
            .bp = 100,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // Lick
        .{
            .effect = .ParalyzeChance2,
            .bp = 20,
            .type = .Ghost,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Smog
        .{
            .effect = .PoisonChance2,
            .bp = 20,
            .type = .Poison,
            .accuracy = percent(70),
            .target = .Other,
        },
        // Sludge
        .{
            .effect = .PoisonChance2,
            .bp = 65,
            .type = .Poison,
            .accuracy = percent(100),
            .target = .Other,
        },
        // BoneClub
        .{
            .effect = .FlinchChance1,
            .bp = 65,
            .type = .Ground,
            .accuracy = percent(85),
            .target = .Other,
        },
        // FireBlast
        .{
            .effect = .BurnChance2,
            .bp = 120,
            .type = .Fire,
            .accuracy = percent(85),
            .target = .Other,
        },
        // Waterfall
        .{
            .effect = .None,
            .bp = 80,
            .type = .Water,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Clamp
        .{
            .effect = .Binding,
            .bp = 35,
            .type = .Water,
            .accuracy = percent(75),
            .target = .Other,
        },
        // Swift
        .{
            .effect = .Swift,
            .bp = 60,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Foes,
        },
        // SkullBash
        .{
            .effect = .Charge,
            .bp = 100,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // SpikeCannon
        .{
            .effect = .MultiHit,
            .bp = 20,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Constrict
        .{
            .effect = .SpeedDownChance,
            .bp = 10,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Amnesia
        .{
            .effect = .SpecialUp2,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Kinesis
        .{
            .effect = .AccuracyDown1,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(80),
            .target = .Other,
        },
        // SoftBoiled
        .{
            .effect = .Heal,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // HighJumpKick
        .{
            .effect = .JumpKick,
            .bp = 85,
            .type = .Fighting,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Glare
        .{
            .effect = .Paralyze,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // DreamEater
        .{
            .effect = .DreamEater,
            .bp = 100,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Other,
        },
        // PoisonGas
        .{
            .effect = .Poison,
            .bp = 0,
            .type = .Poison,
            .accuracy = percent(55),
            .target = .Other,
        },
        // Barrage
        .{
            .effect = .MultiHit,
            .bp = 15,
            .type = .Normal,
            .accuracy = percent(85),
            .target = .Other,
        },
        // LeechLife
        .{
            .effect = .DrainHP,
            .bp = 20,
            .type = .Bug,
            .accuracy = percent(100),
            .target = .Other,
        },
        // LovelyKiss
        .{
            .effect = .Sleep,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(75),
            .target = .Other,
        },
        // SkyAttack
        .{
            .effect = .Charge,
            .bp = 140,
            .type = .Flying,
            .accuracy = percent(90),
            .target = .Any,
        },
        // Transform
        .{
            .effect = .Transform,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Bubble
        .{
            .effect = .SpeedDownChance,
            .bp = 20,
            .type = .Water,
            .accuracy = percent(100),
            .target = .Other,
        },
        // DizzyPunch
        .{
            .effect = .None,
            .bp = 70,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Spore
        .{
            .effect = .Sleep,
            .bp = 0,
            .type = .Grass,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Flash
        .{
            .effect = .AccuracyDown1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(70),
            .target = .Other,
        },
        // Psywave
        .{
            .effect = .SpecialDamage,
            .bp = 1,
            .type = .Psychic,
            .accuracy = percent(80),
            .target = .Other,
        },
        // Splash
        .{
            .effect = .Splash,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // AcidArmor
        .{
            .effect = .DefenseUp2,
            .bp = 0,
            .type = .Poison,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Crabhammer
        .{
            .effect = .HighCritical,
            .bp = 90,
            .type = .Water,
            .accuracy = percent(85),
            .target = .Other,
        },
        // Explosion
        .{
            .effect = .Explode,
            .bp = 170,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // FurySwipes
        .{
            .effect = .MultiHit,
            .bp = 18,
            .type = .Normal,
            .accuracy = percent(80),
            .target = .Other,
        },
        // Bonemerang
        .{
            .effect = .DoubleHit,
            .bp = 50,
            .type = .Ground,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Rest
        .{
            .effect = .Heal,
            .bp = 0,
            .type = .Psychic,
            .accuracy = percent(100),
            .target = .Self,
        },
        // RockSlide
        .{
            .effect = .None,
            .bp = 75,
            .type = .Rock,
            .accuracy = percent(90),
            .target = .Other,
        },
        // HyperFang
        .{
            .effect = .FlinchChance1,
            .bp = 80,
            .type = .Normal,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Sharpen
        .{
            .effect = .AttackUp1,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Conversion
        .{
            .effect = .Conversion,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // TriAttack
        .{
            .effect = .None,
            .bp = 80,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // SuperFang
        .{
            .effect = .SuperFang,
            .bp = 1,
            .type = .Normal,
            .accuracy = percent(90),
            .target = .Other,
        },
        // Slash
        .{
            .effect = .HighCritical,
            .bp = 70,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Other,
        },
        // Substitute
        .{
            .effect = .Substitute,
            .bp = 0,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .Self,
        },
        // Struggle
        .{
            .effect = .Recoil,
            .bp = 50,
            .type = .Normal,
            .accuracy = percent(100),
            .target = .RandomFoe,
        },
    };

    /// Representation of a move's effect.
    pub const Effect = enum(u8) {
        None,
        // onBegin
        Confusion,
        Conversion,
        FocusEnergy,
        Haze,
        Heal,
        LeechSeed,
        LightScreen,
        Mimic,
        Mist,
        Paralyze,
        Poison,
        Reflect,
        Splash,
        Substitute,
        SwitchAndTeleport,
        Transform,
        // onEnd
        AccuracyDown1,
        AttackDown1,
        DefenseDown1,
        DefenseDown2,
        SpeedDown1,
        AttackUp1,
        AttackUp2,
        Bide,
        DefenseUp1,
        DefenseUp2,
        EvasionUp1,
        Sleep,
        SpecialUp1,
        SpecialUp2,
        SpeedUp2,
        // isSpecial
        DrainHP,
        DreamEater,
        Explode,
        JumpKick,
        PayDay,
        Rage,
        Recoil,
        Binding,
        Charge,
        SpecialDamage,
        SuperFang,
        Swift,
        Thrashing,
        // isMulti
        DoubleHit,
        MultiHit,
        Twineedle,
        // other
        AttackDownChance,
        DefenseDownChance,
        SpeedDownChance,
        SpecialDownChance,
        BurnChance1,
        BurnChance2,
        ConfusionChance,
        FlinchChance1,
        FlinchChance2,
        FreezeChance,
        ParalyzeChance1,
        ParalyzeChance2,
        PoisonChance1,
        PoisonChance2,
        Disable,
        HighCritical,
        HyperBeam,
        Metronome,
        MirrorMove,
        OHKO,

        comptime {
            assert(@sizeOf(Effect) == 1);
        }

        /// Whether this effect activates during the "begin" step of move execution.
        pub fn onBegin(effect: Effect) bool {
            return @intFromEnum(effect) > 0 and @intFromEnum(effect) <= 16;
        }

        /// Whether this effect lowers stats.
        pub fn isStatDown(effect: Effect) bool {
            return @intFromEnum(effect) > 16 and @intFromEnum(effect) <= 21;
        }

        /// Whether this effect activates during the "end" step of move execution.
        pub fn onEnd(effect: Effect) bool {
            return @intFromEnum(effect) > 16 and @intFromEnum(effect) <= 31;
        }

        /// Whether this effect is considered to "always happen".
        pub fn alwaysHappens(effect: Effect) bool {
            return @intFromEnum(effect) > 31 and @intFromEnum(effect) <= 38;
        }

        /// Whether this effect is handled specially by the engine.
        pub fn isSpecial(effect: Effect) bool {
            // NB: isSpecial includes isMulti up to Twineedle
            return @intFromEnum(effect) > 31 and @intFromEnum(effect) <= 46;
        }

        /// Whether this effect is a multi-hit effect.
        pub fn isMulti(effect: Effect) bool {
            return @intFromEnum(effect) > 44 and @intFromEnum(effect) <= 47;
        }

        /// Whether this effect is has chance of lowering stats.
        pub fn isStatDownChance(effect: Effect) bool {
            return @intFromEnum(effect) > 47 and @intFromEnum(effect) <= 51;
        }

        /// Whether this effect has a secondary chance.
        pub fn isSecondaryChance(effect: Effect) bool {
            // NB: isSecondaryChance includes isStatDownChance as well as Twineedle
            return (@intFromEnum(effect) > 46 and @intFromEnum(effect) <= 61);
        }
    };

    const Target = enum(u4) {
        // none
        All,
        AllySide,
        Field,
        Self,
        // resolve
        AllOthers,
        Depends,
        Other,
        Any,
        Allies,
        Ally,
        AllyOrSelf,
        Foe,
        // resolve + run
        Foes,
        FoeSide,
        RandomFoe,
    };

    const PP = [_]u8{
        35, // Pound
        25, // KarateChop
        10, // DoubleSlap
        15, // CometPunch
        20, // MegaPunch
        20, // PayDay
        15, // FirePunch
        15, // IcePunch
        15, // ThunderPunch
        35, // Scratch
        30, // ViseGrip
        5, // Guillotine
        10, // RazorWind
        30, // SwordsDance
        30, // Cut
        35, // Gust
        35, // WingAttack
        20, // Whirlwind
        15, // Fly
        20, // Bind
        20, // Slam
        10, // VineWhip
        20, // Stomp
        30, // DoubleKick
        5, // MegaKick
        25, // JumpKick
        15, // RollingKick
        15, // SandAttack
        15, // Headbutt
        25, // HornAttack
        20, // FuryAttack
        5, // HornDrill
        35, // Tackle
        15, // BodySlam
        20, // Wrap
        20, // TakeDown
        20, // Thrash
        15, // DoubleEdge
        30, // TailWhip
        35, // PoisonSting
        20, // Twineedle
        20, // PinMissile
        30, // Leer
        25, // Bite
        40, // Growl
        20, // Roar
        15, // Sing
        20, // Supersonic
        20, // SonicBoom
        20, // Disable
        30, // Acid
        25, // Ember
        15, // Flamethrower
        30, // Mist
        25, // WaterGun
        5, // HydroPump
        15, // Surf
        10, // IceBeam
        5, // Blizzard
        20, // Psybeam
        20, // BubbleBeam
        20, // AuroraBeam
        5, // HyperBeam
        35, // Peck
        20, // DrillPeck
        25, // Submission
        20, // LowKick
        20, // Counter
        20, // SeismicToss
        15, // Strength
        20, // Absorb
        10, // MegaDrain
        10, // LeechSeed
        40, // Growth
        25, // RazorLeaf
        10, // SolarBeam
        35, // PoisonPowder
        30, // StunSpore
        15, // SleepPowder
        20, // PetalDance
        40, // StringShot
        10, // DragonRage
        15, // FireSpin
        30, // ThunderShock
        15, // Thunderbolt
        20, // ThunderWave
        10, // Thunder
        15, // RockThrow
        10, // Earthquake
        5, // Fissure
        10, // Dig
        10, // Toxic
        25, // Confusion
        10, // Psychic
        20, // Hypnosis
        40, // Meditate
        30, // Agility
        30, // QuickAttack
        20, // Rage
        20, // Teleport
        15, // NightShade
        10, // Mimic
        40, // Screech
        15, // DoubleTeam
        20, // Recover
        30, // Harden
        20, // Minimize
        20, // Smokescreen
        10, // ConfuseRay
        40, // Withdraw
        40, // DefenseCurl
        30, // Barrier
        30, // LightScreen
        30, // Haze
        20, // Reflect
        30, // FocusEnergy
        10, // Bide
        10, // Metronome
        20, // MirrorMove
        5, // SelfDestruct
        10, // EggBomb
        30, // Lick
        20, // Smog
        20, // Sludge
        20, // BoneClub
        5, // FireBlast
        15, // Waterfall
        10, // Clamp
        20, // Swift
        15, // SkullBash
        15, // SpikeCannon
        35, // Constrict
        20, // Amnesia
        15, // Kinesis
        10, // SoftBoiled
        20, // HighJumpKick
        30, // Glare
        15, // DreamEater
        40, // PoisonGas
        20, // Barrage
        15, // LeechLife
        10, // LovelyKiss
        5, // SkyAttack
        10, // Transform
        30, // Bubble
        10, // DizzyPunch
        15, // Spore
        20, // Flash
        15, // Psywave
        40, // Splash
        40, // AcidArmor
        10, // Crabhammer
        5, // Explosion
        15, // FurySwipes
        10, // Bonemerang
        10, // Rest
        10, // RockSlide
        15, // HyperFang
        30, // Sharpen
        30, // Conversion
        10, // TriAttack
        10, // SuperFang
        20, // Slash
        10, // Substitute
        10, // Struggle,
    };

    comptime {
        assert(@sizeOf(Move) == 1);
        assert(@sizeOf(@TypeOf(DATA)) == 660);
    }

    /// The number of Pokémon moves in this generation.
    pub const size = 165;

    /// Pokémon moves that can be called by Metronome in this generation.
    pub const METRONOME = init: {
        var num = 0;
        var moves: [163]Move = undefined;
        for (1..Move.size) |i| {
            if (i != @intFromEnum(Move.Metronome)) {
                moves[num] = @enumFromInt(i);
                num += 1;
            }
        }
        assert(num == moves.len);
        break :init moves;
    };

    /// Returns the `Data` corresponding to the move.
    pub fn get(id: Move) Data {
        assert(id != .None and id != .SKIP_TURN);
        return DATA[@intFromEnum(id) - 1];
    }

    /// Returns the base PP of the move.
    pub fn pp(id: Move) u8 {
        assert(id != .None);
        return PP[@intFromEnum(id) - 1];
    }
};
